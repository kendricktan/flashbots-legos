/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LiquidityProtectionInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "acceptStoreOwnership()": FunctionFragment;
    "acceptWalletOwnership()": FunctionFragment;
    "addLiquidity(address,address,uint256)": FunctionFragment;
    "addLiquidityFor(address,address,address,uint256)": FunctionFragment;
    "baseTokenAvailableSpace(address)": FunctionFragment;
    "claimBalance(uint256,uint256)": FunctionFragment;
    "govToken()": FunctionFragment;
    "govTokenGovernance()": FunctionFragment;
    "lastRemoveCheckpointStore()": FunctionFragment;
    "networkToken()": FunctionFragment;
    "networkTokenAvailableSpace(address)": FunctionFragment;
    "networkTokenGovernance()": FunctionFragment;
    "newOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolAvailableSpace(address)": FunctionFragment;
    "poolROI(address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "removeLiquidity(uint256,uint32)": FunctionFragment;
    "removeLiquidityReturn(uint256,uint32,uint256)": FunctionFragment;
    "settings()": FunctionFragment;
    "stats()": FunctionFragment;
    "store()": FunctionFragment;
    "systemStore()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferStoreOwnership(address)": FunctionFragment;
    "transferWalletOwnership(address)": FunctionFragment;
    "wallet()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptStoreOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptWalletOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityFor",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "baseTokenAvailableSpace",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBalance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "govToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "govTokenGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRemoveCheckpointStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "networkToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "networkTokenAvailableSpace",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "networkTokenGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolAvailableSpace",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolROI",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityReturn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(functionFragment: "stats", values?: undefined): string;
  encodeFunctionData(functionFragment: "store", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferStoreOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWalletOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "wallet", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptStoreOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptWalletOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenAvailableSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "govToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "govTokenGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRemoveCheckpointStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkTokenAvailableSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkTokenGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolAvailableSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolROI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferStoreOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWalletOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wallet", data: BytesLike): Result;

  events: {
    "OwnerUpdate(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerUpdate"): EventFragment;
}

export class LiquidityProtection extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LiquidityProtectionInterface;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptStoreOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptStoreOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptWalletOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptWalletOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity(
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addLiquidity(address,address,uint256)"(
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityFor(
      _owner: string,
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addLiquidityFor(address,address,address,uint256)"(
      _owner: string,
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    baseTokenAvailableSpace(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "baseTokenAvailableSpace(address)"(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimBalance(
      _startIndex: BigNumberish,
      _endIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimBalance(uint256,uint256)"(
      _startIndex: BigNumberish,
      _endIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    govToken(overrides?: CallOverrides): Promise<[string]>;

    "govToken()"(overrides?: CallOverrides): Promise<[string]>;

    govTokenGovernance(overrides?: CallOverrides): Promise<[string]>;

    "govTokenGovernance()"(overrides?: CallOverrides): Promise<[string]>;

    lastRemoveCheckpointStore(overrides?: CallOverrides): Promise<[string]>;

    "lastRemoveCheckpointStore()"(overrides?: CallOverrides): Promise<[string]>;

    networkToken(overrides?: CallOverrides): Promise<[string]>;

    "networkToken()"(overrides?: CallOverrides): Promise<[string]>;

    networkTokenAvailableSpace(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "networkTokenAvailableSpace(address)"(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    networkTokenGovernance(overrides?: CallOverrides): Promise<[string]>;

    "networkTokenGovernance()"(overrides?: CallOverrides): Promise<[string]>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    "newOwner()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    poolAvailableSpace(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "poolAvailableSpace(address)"(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    poolROI(
      _poolToken: string,
      _reserveToken: string,
      _reserveAmount: BigNumberish,
      _poolRateN: BigNumberish,
      _poolRateD: BigNumberish,
      _reserveRateN: BigNumberish,
      _reserveRateD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "poolROI(address,address,uint256,uint256,uint256,uint256,uint256)"(
      _poolToken: string,
      _reserveToken: string,
      _reserveAmount: BigNumberish,
      _poolRateN: BigNumberish,
      _poolRateD: BigNumberish,
      _reserveRateN: BigNumberish,
      _reserveRateD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeLiquidity(
      _id: BigNumberish,
      _portion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeLiquidity(uint256,uint32)"(
      _id: BigNumberish,
      _portion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityReturn(
      _id: BigNumberish,
      _portion: BigNumberish,
      _removeTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "removeLiquidityReturn(uint256,uint32,uint256)"(
      _id: BigNumberish,
      _portion: BigNumberish,
      _removeTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    settings(overrides?: CallOverrides): Promise<[string]>;

    "settings()"(overrides?: CallOverrides): Promise<[string]>;

    stats(overrides?: CallOverrides): Promise<[string]>;

    "stats()"(overrides?: CallOverrides): Promise<[string]>;

    store(overrides?: CallOverrides): Promise<[string]>;

    "store()"(overrides?: CallOverrides): Promise<[string]>;

    systemStore(overrides?: CallOverrides): Promise<[string]>;

    "systemStore()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferStoreOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferStoreOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferWalletOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferWalletOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wallet(overrides?: CallOverrides): Promise<[string]>;

    "wallet()"(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptStoreOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptStoreOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptWalletOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptWalletOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity(
    _poolAnchor: string,
    _reserveToken: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addLiquidity(address,address,uint256)"(
    _poolAnchor: string,
    _reserveToken: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityFor(
    _owner: string,
    _poolAnchor: string,
    _reserveToken: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addLiquidityFor(address,address,address,uint256)"(
    _owner: string,
    _poolAnchor: string,
    _reserveToken: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  baseTokenAvailableSpace(
    _poolAnchor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "baseTokenAvailableSpace(address)"(
    _poolAnchor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimBalance(
    _startIndex: BigNumberish,
    _endIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimBalance(uint256,uint256)"(
    _startIndex: BigNumberish,
    _endIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  govToken(overrides?: CallOverrides): Promise<string>;

  "govToken()"(overrides?: CallOverrides): Promise<string>;

  govTokenGovernance(overrides?: CallOverrides): Promise<string>;

  "govTokenGovernance()"(overrides?: CallOverrides): Promise<string>;

  lastRemoveCheckpointStore(overrides?: CallOverrides): Promise<string>;

  "lastRemoveCheckpointStore()"(overrides?: CallOverrides): Promise<string>;

  networkToken(overrides?: CallOverrides): Promise<string>;

  "networkToken()"(overrides?: CallOverrides): Promise<string>;

  networkTokenAvailableSpace(
    _poolAnchor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "networkTokenAvailableSpace(address)"(
    _poolAnchor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  networkTokenGovernance(overrides?: CallOverrides): Promise<string>;

  "networkTokenGovernance()"(overrides?: CallOverrides): Promise<string>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  "newOwner()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  poolAvailableSpace(
    _poolAnchor: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "poolAvailableSpace(address)"(
    _poolAnchor: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  poolROI(
    _poolToken: string,
    _reserveToken: string,
    _reserveAmount: BigNumberish,
    _poolRateN: BigNumberish,
    _poolRateD: BigNumberish,
    _reserveRateN: BigNumberish,
    _reserveRateD: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolROI(address,address,uint256,uint256,uint256,uint256,uint256)"(
    _poolToken: string,
    _reserveToken: string,
    _reserveAmount: BigNumberish,
    _poolRateN: BigNumberish,
    _poolRateD: BigNumberish,
    _reserveRateN: BigNumberish,
    _reserveRateD: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidity(
    _id: BigNumberish,
    _portion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeLiquidity(uint256,uint32)"(
    _id: BigNumberish,
    _portion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityReturn(
    _id: BigNumberish,
    _portion: BigNumberish,
    _removeTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "removeLiquidityReturn(uint256,uint32,uint256)"(
    _id: BigNumberish,
    _portion: BigNumberish,
    _removeTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  settings(overrides?: CallOverrides): Promise<string>;

  "settings()"(overrides?: CallOverrides): Promise<string>;

  stats(overrides?: CallOverrides): Promise<string>;

  "stats()"(overrides?: CallOverrides): Promise<string>;

  store(overrides?: CallOverrides): Promise<string>;

  "store()"(overrides?: CallOverrides): Promise<string>;

  systemStore(overrides?: CallOverrides): Promise<string>;

  "systemStore()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferStoreOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferStoreOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferWalletOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferWalletOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wallet(overrides?: CallOverrides): Promise<string>;

  "wallet()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    acceptStoreOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptStoreOwnership()"(overrides?: CallOverrides): Promise<void>;

    acceptWalletOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptWalletOwnership()"(overrides?: CallOverrides): Promise<void>;

    addLiquidity(
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addLiquidity(address,address,uint256)"(
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityFor(
      _owner: string,
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addLiquidityFor(address,address,address,uint256)"(
      _owner: string,
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseTokenAvailableSpace(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "baseTokenAvailableSpace(address)"(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBalance(
      _startIndex: BigNumberish,
      _endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimBalance(uint256,uint256)"(
      _startIndex: BigNumberish,
      _endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    govToken(overrides?: CallOverrides): Promise<string>;

    "govToken()"(overrides?: CallOverrides): Promise<string>;

    govTokenGovernance(overrides?: CallOverrides): Promise<string>;

    "govTokenGovernance()"(overrides?: CallOverrides): Promise<string>;

    lastRemoveCheckpointStore(overrides?: CallOverrides): Promise<string>;

    "lastRemoveCheckpointStore()"(overrides?: CallOverrides): Promise<string>;

    networkToken(overrides?: CallOverrides): Promise<string>;

    "networkToken()"(overrides?: CallOverrides): Promise<string>;

    networkTokenAvailableSpace(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "networkTokenAvailableSpace(address)"(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkTokenGovernance(overrides?: CallOverrides): Promise<string>;

    "networkTokenGovernance()"(overrides?: CallOverrides): Promise<string>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    "newOwner()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    poolAvailableSpace(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "poolAvailableSpace(address)"(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    poolROI(
      _poolToken: string,
      _reserveToken: string,
      _reserveAmount: BigNumberish,
      _poolRateN: BigNumberish,
      _poolRateD: BigNumberish,
      _reserveRateN: BigNumberish,
      _reserveRateD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolROI(address,address,uint256,uint256,uint256,uint256,uint256)"(
      _poolToken: string,
      _reserveToken: string,
      _reserveAmount: BigNumberish,
      _poolRateN: BigNumberish,
      _poolRateD: BigNumberish,
      _reserveRateN: BigNumberish,
      _reserveRateD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _id: BigNumberish,
      _portion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidity(uint256,uint32)"(
      _id: BigNumberish,
      _portion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityReturn(
      _id: BigNumberish,
      _portion: BigNumberish,
      _removeTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "removeLiquidityReturn(uint256,uint32,uint256)"(
      _id: BigNumberish,
      _portion: BigNumberish,
      _removeTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    settings(overrides?: CallOverrides): Promise<string>;

    "settings()"(overrides?: CallOverrides): Promise<string>;

    stats(overrides?: CallOverrides): Promise<string>;

    "stats()"(overrides?: CallOverrides): Promise<string>;

    store(overrides?: CallOverrides): Promise<string>;

    "store()"(overrides?: CallOverrides): Promise<string>;

    systemStore(overrides?: CallOverrides): Promise<string>;

    "systemStore()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferStoreOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferStoreOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferWalletOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferWalletOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wallet(overrides?: CallOverrides): Promise<string>;

    "wallet()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnerUpdate(
      _prevOwner: string | null,
      _newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { _prevOwner: string; _newOwner: string }
    >;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptStoreOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptStoreOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptWalletOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptWalletOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity(
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addLiquidity(address,address,uint256)"(
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityFor(
      _owner: string,
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addLiquidityFor(address,address,address,uint256)"(
      _owner: string,
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    baseTokenAvailableSpace(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "baseTokenAvailableSpace(address)"(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBalance(
      _startIndex: BigNumberish,
      _endIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimBalance(uint256,uint256)"(
      _startIndex: BigNumberish,
      _endIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    govToken(overrides?: CallOverrides): Promise<BigNumber>;

    "govToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    govTokenGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    "govTokenGovernance()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastRemoveCheckpointStore(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRemoveCheckpointStore()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkToken(overrides?: CallOverrides): Promise<BigNumber>;

    "networkToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    networkTokenAvailableSpace(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "networkTokenAvailableSpace(address)"(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkTokenGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    "networkTokenGovernance()"(overrides?: CallOverrides): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "newOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolAvailableSpace(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolAvailableSpace(address)"(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolROI(
      _poolToken: string,
      _reserveToken: string,
      _reserveAmount: BigNumberish,
      _poolRateN: BigNumberish,
      _poolRateD: BigNumberish,
      _reserveRateN: BigNumberish,
      _reserveRateD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolROI(address,address,uint256,uint256,uint256,uint256,uint256)"(
      _poolToken: string,
      _reserveToken: string,
      _reserveAmount: BigNumberish,
      _poolRateN: BigNumberish,
      _poolRateD: BigNumberish,
      _reserveRateN: BigNumberish,
      _reserveRateD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _id: BigNumberish,
      _portion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeLiquidity(uint256,uint32)"(
      _id: BigNumberish,
      _portion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityReturn(
      _id: BigNumberish,
      _portion: BigNumberish,
      _removeTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeLiquidityReturn(uint256,uint32,uint256)"(
      _id: BigNumberish,
      _portion: BigNumberish,
      _removeTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    "settings()"(overrides?: CallOverrides): Promise<BigNumber>;

    stats(overrides?: CallOverrides): Promise<BigNumber>;

    "stats()"(overrides?: CallOverrides): Promise<BigNumber>;

    store(overrides?: CallOverrides): Promise<BigNumber>;

    "store()"(overrides?: CallOverrides): Promise<BigNumber>;

    systemStore(overrides?: CallOverrides): Promise<BigNumber>;

    "systemStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferStoreOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferStoreOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferWalletOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferWalletOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<BigNumber>;

    "wallet()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptStoreOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptStoreOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptWalletOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptWalletOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addLiquidity(address,address,uint256)"(
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityFor(
      _owner: string,
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addLiquidityFor(address,address,address,uint256)"(
      _owner: string,
      _poolAnchor: string,
      _reserveToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    baseTokenAvailableSpace(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "baseTokenAvailableSpace(address)"(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimBalance(
      _startIndex: BigNumberish,
      _endIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimBalance(uint256,uint256)"(
      _startIndex: BigNumberish,
      _endIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    govToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "govToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    govTokenGovernance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "govTokenGovernance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRemoveCheckpointStore(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastRemoveCheckpointStore()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "networkToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    networkTokenAvailableSpace(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "networkTokenAvailableSpace(address)"(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkTokenGovernance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "networkTokenGovernance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolAvailableSpace(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolAvailableSpace(address)"(
      _poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolROI(
      _poolToken: string,
      _reserveToken: string,
      _reserveAmount: BigNumberish,
      _poolRateN: BigNumberish,
      _poolRateD: BigNumberish,
      _reserveRateN: BigNumberish,
      _reserveRateD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolROI(address,address,uint256,uint256,uint256,uint256,uint256)"(
      _poolToken: string,
      _reserveToken: string,
      _reserveAmount: BigNumberish,
      _poolRateN: BigNumberish,
      _poolRateD: BigNumberish,
      _reserveRateN: BigNumberish,
      _reserveRateD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _id: BigNumberish,
      _portion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(uint256,uint32)"(
      _id: BigNumberish,
      _portion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityReturn(
      _id: BigNumberish,
      _portion: BigNumberish,
      _removeTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityReturn(uint256,uint32,uint256)"(
      _id: BigNumberish,
      _portion: BigNumberish,
      _removeTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "settings()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stats()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    store(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "store()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "systemStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferStoreOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferStoreOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferWalletOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferWalletOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
